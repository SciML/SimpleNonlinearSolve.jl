Base.@kwdef struct BatchedSimpleDFSane{T, F, TC <: NLSolveTerminationCondition} <:
                   AbstractBatchedNonlinearSolveAlgorithm
    œÉ‚Çò·µ¢‚Çô::T = 1.0f-10
    œÉ‚Çò‚Çê‚Çì::T = 1.0f+10
    œÉ‚ÇÅ::T = 1.0f0
    M::Int = 10
    Œ≥::T = 1.0f-4
    œÑ‚Çò·µ¢‚Çô::T = 0.1f0
    œÑ‚Çò‚Çê‚Çì::T = 0.5f0
    n‚Çë‚Çì‚Çö::Int = 2
    Œ∑‚Çõ::F = (f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÅ, n, x‚Çô, f‚Çô) -> f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚ÇÅ ./ n .^ 2
    termination_condition::TC = NLSolveTerminationCondition(NLSolveTerminationMode.NLSolveDefault;
        abstol = nothing,
        reltol = nothing)
    max_inner_iterations::Int = 1000
end

function SciMLBase.__solve(prob::NonlinearProblem,
        alg::BatchedSimpleDFSane,
        args...;
        abstol = nothing,
        reltol = nothing,
        maxiters = 100,
        kwargs...)
    iip = isinplace(prob)

    u, f, reconstruct = _construct_batched_problem_structure(prob)
    L, N = size(u)
    T = eltype(u)

    tc = alg.termination_condition
    mode = DiffEqBase.get_termination_mode(tc)

    storage = _get_storage(mode, u)

    atol = _get_tolerance(abstol, tc.abstol, T)
    rtol = _get_tolerance(reltol, tc.reltol, T)
    termination_condition = tc(storage)

    œÉ‚Çò·µ¢‚Çô, œÉ‚Çò‚Çê‚Çì, Œ≥, œÑ‚Çò·µ¢‚Çô, œÑ‚Çò‚Çê‚Çì = T(alg.œÉ‚Çò·µ¢‚Çô), T(alg.œÉ‚Çò‚Çê‚Çì), T(alg.Œ≥), T(alg.œÑ‚Çò·µ¢‚Çô), T(alg.œÑ‚Çò‚Çê‚Çì)
    Œ±‚ÇÅ = one(T)
    Œ±‚Çä, Œ±‚Çã = similar(u, 1, N), similar(u, 1, N)
    œÉ‚Çô = fill(T(alg.œÉ‚ÇÅ), 1, N)
    ùíπ = similar(œÉ‚Çô, L, N)
    M = alg.M
    n‚Çë‚Çì‚Çö = alg.n‚Çë‚Çì‚Çö

    x‚Çô, x‚Çô‚Çã‚ÇÅ, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ, f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô = copy(u), copy(u), similar(u, 1, N), similar(u, 1, N)

    function ff!(f‚Çì, f‚Çô‚Çí·µ£‚Çò, x)
        f(f‚Çì, x)
        sum!(abs2, f‚Çô‚Çí·µ£‚Çò, f‚Çì)
        f‚Çô‚Çí·µ£‚Çò .^= (n‚Çë‚Çì‚Çö / 2)
        return f‚Çì
    end

    function ff!(f‚Çô‚Çí·µ£‚Çò, x)
        f‚Çì = f(x)
        sum!(abs2, f‚Çô‚Çí·µ£‚Çò, f‚Çì)
        f‚Çô‚Çí·µ£‚Çò .^= (n‚Çë‚Çì‚Çö / 2)
        return f‚Çì
    end

    @maybeinplace iip f‚Çô‚Çã‚ÇÅ=ff!(f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ, x‚Çô) x‚Çô
    iip && (f‚Çô = similar(f‚Çô‚Çã‚ÇÅ))
    ‚Ñã = repeat(f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ, M, 1)
    fÃÑ = similar(‚Ñã, 1, N)
    Œ∑‚Çõ = (n, x‚Çô, f‚Çô) -> alg.Œ∑‚Çõ(f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ, n, x‚Çô, f‚Çô)

    for n in 1:maxiters
        # Spectral parameter range check
        @. œÉ‚Çô = sign(œÉ‚Çô) * clamp(abs(œÉ‚Çô), œÉ‚Çò·µ¢‚Çô, œÉ‚Çò‚Çê‚Çì)

        # Line search direction
        @. ùíπ = -œÉ‚Çô * f‚Çô‚Çã‚ÇÅ

        Œ∑ = Œ∑‚Çõ(n, x‚Çô‚Çã‚ÇÅ, f‚Çô‚Çã‚ÇÅ)
        maximum!(fÃÑ, ‚Ñã)
        fill!(Œ±‚Çä, Œ±‚ÇÅ)
        fill!(Œ±‚Çã, Œ±‚ÇÅ)
        @. x‚Çô = x‚Çô‚Çã‚ÇÅ + Œ±‚Çä * ùíπ

        @maybeinplace iip f‚Çô=ff!(f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô, x‚Çô)

        for _ in 1:(alg.max_inner_iterations)
            ùí∏ = @. fÃÑ + Œ∑ - Œ≥ * Œ±‚Çä^2 * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ

            (sum(f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô .‚â§ ùí∏) ‚â• N √∑ 2) && break

            @. Œ±‚Çä = clamp(Œ±‚Çä^2 * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ / (f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô + (T(2) * Œ±‚Çä - T(1)) * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ),
                œÑ‚Çò·µ¢‚Çô * Œ±‚Çä,
                œÑ‚Çò‚Çê‚Çì * Œ±‚Çä)
            @. x‚Çô = x‚Çô‚Çã‚ÇÅ - Œ±‚Çã * ùíπ
            @maybeinplace iip f‚Çô=ff!(f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô, x‚Çô)

            (sum(f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô .‚â§ ùí∏) ‚â• N √∑ 2) && break

            @. Œ±‚Çã = clamp(Œ±‚Çã^2 * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ / (f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô + (T(2) * Œ±‚Çã - T(1)) * f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ),
                œÑ‚Çò·µ¢‚Çô * Œ±‚Çã,
                œÑ‚Çò‚Çê‚Çì * Œ±‚Çã)
            @. x‚Çô = x‚Çô‚Çã‚ÇÅ + Œ±‚Çä * ùíπ
            @maybeinplace iip f‚Çô=ff!(f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô, x‚Çô)
        end

        if termination_condition(f‚Çô, x‚Çô, x‚Çô‚Çã‚ÇÅ, atol, rtol)
            retcode, x‚Çô, f‚Çô = _result_from_storage(storage, x‚Çô, f‚Çô, f, mode, iip)
            return DiffEqBase.build_solution(prob,
                alg,
                reconstruct(x‚Çô),
                reconstruct(f‚Çô);
                retcode)
        end

        # Update spectral parameter
        @. x‚Çô‚Çã‚ÇÅ = x‚Çô - x‚Çô‚Çã‚ÇÅ
        @. f‚Çô‚Çã‚ÇÅ = f‚Çô - f‚Çô‚Çã‚ÇÅ

        sum!(abs2, Œ±‚Çä, x‚Çô‚Çã‚ÇÅ)
        sum!(Œ±‚Çã, x‚Çô‚Çã‚ÇÅ .* f‚Çô‚Çã‚ÇÅ)
        œÉ‚Çô .= Œ±‚Çä ./ (Œ±‚Çã .+ T(1e-5))

        # Take step
        @. x‚Çô‚Çã‚ÇÅ = x‚Çô
        @. f‚Çô‚Çã‚ÇÅ = f‚Çô
        @. f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô‚Çã‚ÇÅ = f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô

        # Update history
        ‚Ñã[n % M + 1, :] .= view(f‚Çç‚Çô‚Çí·µ£‚Çò‚Çé‚Çô, 1, :)
    end

    if mode ‚àà DiffEqBase.SAFE_BEST_TERMINATION_MODES
        x‚Çô = storage.u
        @maybeinplace iip f‚Çô=f(x‚Çô)
    end

    return DiffEqBase.build_solution(prob,
        alg,
        reconstruct(x‚Çô),
        reconstruct(f‚Çô);
        retcode = ReturnCode.MaxIters)
end
